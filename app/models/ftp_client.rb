require 'net/ftp'

# FTP Client object used by the ftp service class
class FtpClient
  include ActiveModel::Model
  attr_accessor :host, :port, :username, :password, :directory

  # on instantiation, init credentials, setup connection, and connect
  def initialize(attributes = {})
    super(attributes)
    init_credentials
    init_connection
    connect
  end

  def chdir(directory)
    return if directory.blank?
    @ftp.chdir(directory)
  end

  # upload a text string directly to a remote location as file_name
  def upload_string(string, file_name)
    fail 'file name required' if file_name.blank?
    @ftp.puttextcontent(string, file_name)
  rescue Net::FTPPermError => e
    raise "FTP file error: #{e}"
  end

  def close
    @ftp.close
  rescue => e
    Delayed::Worker.logger.debug 'Unable to close ftp connection to ' /
      "#{@host}:#{@port} #{e}"
  end

  # can the client write to current directory
  def write?
    file_name = test_file_name
    @ftp.puttextcontent('Test file generated by automated FTP Delivery - please discard.', file_name)
    @ftp.delete(file_name)
    true
  # only rescue ftp errors as write? false
  rescue Net::FTPPermError
    false
  end

  private

  def connect
    @ftp.connect(@host, @port)
    @ftp.login(@username, @password)
  rescue Net::FTPPermError => e
    close
    raise "#{e}"
  end

  # default connection setup
  def init_connection
    @ftp = Net::FTP.new
    @ftp.debug_mode = true
    @ftp.passive = true
  end

  # sets default credential options
  def init_credentials
    fail 'hostname required' if @host.blank?
    @port = '21' if @port.blank?
    # remvove protocol prefix from hostname (eg, ftp://myftp becomes myftp)
    @host.gsub!(%r{.+://}, '')
  end

  # generates random string for file name
  def random_file_name
    SecureRandom.hex[0, 8] + '.txt'
  end

  # checks if file exists in curren directory
  def file_exists?(file_name)
    !@ftp.nlst(file_name).empty?
  end

  # gets unique filename for current directory
  def test_file_name
    file_name = nil
    i = 0
    # generate a random file name that doesn't exists on server
    while file_name.blank?
      temp_fn = random_file_name
      file_name = temp_fn unless file_exists?(temp_fn)
      i += 1
      fail 'too many random file name retries' if i > 10
    end
    file_name
  end
end
